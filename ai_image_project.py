# -*- coding: utf-8 -*-
"""AI IMage project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dPocjmzXZKq0dHiGeIbzXspjnHDfYzsf
"""

import tensorflow as tf
import numpy as np
import os
import matplotlib.pyplot as plt

data=np.load("/content/olivetti_faces.npy")
print(data)
target=np.load("/content/olivetti_faces_target.npy")

print("There are {} images in the dataset".format(len(data)))
print("There are {} unique targets in the dataset".format(len(np.unique(target))))
print("Size of each image is {}x{}".format(data.shape[1],data.shape[2]))
print("Pixel values were scaled to [0,1] interval. e.g:{}".format(data[0][0,:4]))

print("unique target number:",np.unique(target))

def showPhoto(images, unique_ids):
    fig, ax=plt.subplots(nrows=4, ncols=10, figsize=(18, 9))
    ax=ax.flatten()
    
    #iterating over user ids
    for unique_id in unique_ids:
        image_index=unique_id*10
        ax[unique_id].imshow(images[image_index], cmap='gray')
        ax[unique_id].set_xticks([])
        ax[unique_id].set_yticks([])
        ax[unique_id].set_title("face id:{}".format(unique_id))
    plt.suptitle("There are 40 distinct people in the dataset")

showPhoto(data, np.unique(target))

def show_10_faces_of_n_subject(images, subject_ids):
    cols=10
    rows=(len(subject_ids)*10)/cols 
    rows=int(rows)
    
    fig, axarr=plt.subplots(nrows=rows, ncols=cols, figsize=(18,9))
    
    for i, subject_id in enumerate(subject_ids):
        for j in range(cols):
            image_index=subject_id*10 + j
            axarr[i,j].imshow(images[image_index], cmap="gray")
            axarr[i,j].set_xticks([])
            axarr[i,j].set_yticks([])
            axarr[i,j].set_title("face id:{}".format(subject_id))

show_10_faces_of_n_subject(images=data, subject_ids=[1,5, 14, 24, 36])

#hena ben7wl mn 3D ela 2D array
X=data.reshape((data.shape[0],data.shape[1]*data.shape[2]))
print("X shape:",X.shape)

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test=train_test_split(X, target, test_size=0.3, stratify=target, random_state=0)

print(np.)

print(np.array(target))

import pandas as pd

y_frame=pd.DataFrame()
y_frame['subject ids']=y_train
y_frame.groupby(['subject ids']).size().plot.bar(figsize=(15,8),title="Number of Samples for Each Classes")

from sklearn.decomposition import PCA
pca=PCA(n_components=2)
pca.fit(X)
X_pca=pca.transform(X)

pca=PCA()
pca.fit(X)

plt.figure(1, figsize=(12,8))

plt.plot(pca.explained_variance_, linewidth=2)
 
plt.xlabel('Components')
plt.ylabel('Explained Variaces')
plt.show()

"""## Feature **Scaling**"""

X_train_pca=pca.transform(X_train)
X_test_pca=pca.transform(X_test)

X_train=X_train_pca/255
X_test=X_test_pca/255

from sklearn.neural_network import MLPRegressor
MLPRegressorModel = MLPRegressor(activation='tanh', 
                                 solver='lbfgs',  
                                 learning_rate='constant', 
                                 early_stopping= False,
                                 alpha=0.000001 ,hidden_layer_sizes=(100, 4),random_state=33)
MLPRegressorModel.fit(X_train, y_train)

print('MLPRegressorModel Train Score is : ' , MLPRegressorModel.score(X_train, y_train))
print('MLPRegressorModel Test Score is : ' , MLPRegressorModel.score(X_test, y_test))

y_pred=MLPRegressorModel.predict(X_test)
y_pred=np.round(y_pred)
print(y_pred)

from sklearn import metrics
import seaborn as sns
plt.figure(1, figsize=(12,8))
sns.heatmap(metrics.confusion_matrix(y_test, y_pred))

name_dict={0:'michael',1:'john',2:'messi',3:'neymar',4:'sam',5:'zawe',6:'locus',7:'adriano',8:'hernadez',9:'adel',10:'masoud',11:'salim',14:'shalabi',15:'hosany',16:'caspar',17:'peter',18:'hamdy',19:'hossam',20:'swilam',21:'saad',22:'sead',23:'said',24:'elsaid',25:'elsead',27:'elhosany',28:'elrefa3y',29:'eljhini',30:'elshreaf',31:'Mos3ab',32:'mohsen',33:'zakaria',34:'reda',35:'ashraf',36:'kamal',37:'kamel',38:'emad',39:'Taha'}

image_index =110
print("Original Name:",name_dict[ y_test[image_index]])
# predict from model
print("Predicted Name:",name_dict[ y_pred[image_index]])
plt.axis('off')
plt.imshow(data[image_index].reshape(64, 64), cmap='gray');